import numpy as np
import csv
import sys


def round_to_nearest_frac(number, frac):
    """
    Round to the nearest fraction i.e. when frac = 2, rounds to the nearest half, when frac = 3 rounds to the nearest 3
    """
    number = round(number * frac)
    return number / frac


def get_end_time(file_input):
    with open(file_input, "r") as f:
        bTime = 0.0
        eTime = 0.0
        aTime = 0.0
        for line in f:
            line = line.split("\t")
            del line[1]
            line[-1] = line[-1].strip("\n")
            line[1] = float(line[1])
            line[2] = float(line[2])
            line[3] = float(line[3])
            if line[0] == "default":
                continue
            if (line[0] == "Behavioral_Engagement") and line[2] > bTime:
                bTime = line[2]
            elif line[0] == "Attention_Engagement" and line[2] > aTime:
                aTime = line[2]
            elif line[0] == "Emotional_Engagement" and line[2] > eTime:
                eTime = line[2]
    return bTime, aTime, eTime


def import_data(file_name):
    bTime, aTime, eTime = get_end_time(file_name)
    Behavioral_Engagement = create_template_list(bTime)
    Attention_Engagement = create_template_list(aTime)
    Emotional_Engagement = create_template_list(eTime)
    with open(file_name, "r") as f:
        for line in f:
            line = line.split("\t")
            del line[1]
            line[-1] = line[-1].strip("\n")
            if line[4] == "off-tsak" or line[4] == "distarcted" or line[4] == "Bored":
                tag = 1
            if line[4] == "on-task" or line[4] == "idle" or line[4] == "Confused":
                tag = 2
            if line[4] == "Satisfied" or line[4] == "focused":
                tag = 3
            start = int(float(line[1]) * 1000) - 1
            stop = int(float(line[2]) * 1000)
            if line[0] == "Behavioral_Engagement":
                for i in range(start, stop):
                    Behavioral_Engagement[i] = tag
            elif line[0] == "Attention_Engagement":
                for i in range(start, stop):
                    Attention_Engagement[i] = tag
            elif line[0] == "Emotional_Engagement":
                for i in range(start, stop):
                    Emotional_Engagement[i] = tag
    return Behavioral_Engagement, Attention_Engagement, Emotional_Engagement


def create_template_list(duration):
    return [0] * int(duration * 1000)


def find_cronbachs(file1, file2):
    b1, a1, e1 = import_data(file1)
    b2, a2, e2 = import_data(file2)
    b = cronbachs(b1, b2)
    a = cronbachs(a1, a2)
    d = cronbachs(e1, e2)
    return (
        "\nBehavioral: "
        + str(b)
        + "\nAttentional: "
        + str(a)
        + "\nEmotional: "
        + str(d)
        + "\n"
    )


def cronbachs(list1, list2):
    """
    implementation of cronbachs alpha 
    """
    N = len(list1)
    var = (np.var(list1) + np.var(list2)) / 2
    covar = abs(np.cov(list1, list2)[0][1]) #made into abs because covar is technically a vector
    bias = 0.1 * N
    return (N * covar) / (var * bias + (N - 1) * covar)


def save_default(files):
    """
    Files is a list to be iterated through, where each element is a file to pull from
    """
    writeToCSV = [["type", "start", "stop", "duration", "notes"]]
    for fil in files:
        f = open(fil)
        for line in f:
            line = line.split("\t")
            del line[1]
            line[-1] = line[-1].strip("\n")
            if line[0] == "default":
                writeToCSV.append(line)
    return writeToCSV


def write_default(list):
    """
    Takes a list generated by save_default and writes it to an output file
    """

    with open("defaults.csv", "w+", newline="") as f:
        writer = csv.writer(f)
        writer.writerows(list)


if __name__ == "__main__":
    # print(get_end_time('resources/P01_S02_wellness_Emily.txt'))
    # print(len(create_template_list(304.47)))

    # b1, a1, e1 = import_data("resources/P01_S02_wellness_Emily.txt")

    print(find_cronbachs(str(sys.argv[1]), str(sys.argv[2])))
